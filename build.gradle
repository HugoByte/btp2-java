import java.nio.file.Files

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath 'foundation.icon:gradle-javaee-plugin:0.8.3'
    }
}

subprojects {
    repositories {
        mavenLocal()
        mavenCentral()
    }

    configurations.configureEach {
        resolutionStrategy {
            cacheChangingModulesFor 1, 'minutes'
        }
    }

    apply plugin: 'java'
    apply plugin: 'foundation.icon.javaee'

    java {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }

    ext {
        javaeeVersion = getProperty("javaee.version")
        scorexVersion = getProperty("scorex.version")
        javaeeUnittestVersion = getProperty("javaee-unittest.version")
        scoreClientVersion = getProperty("score-client.version")
        iconsdkVersion = getProperty("iconsdk.version")
        jupiterVersion = getProperty("jupiter.version")
        jacksonVersion = getProperty("jackson.version")
        debugJar = Boolean.parseBoolean(getProperty("debugJar").toString())
        integrationTest = Boolean.parseBoolean(getProperty("integrationTest").toString())
    }

    def loadProperties = {
        def prefix = 'score-test.'
        def props = project.getProperties()
        def scoreTest = new HashMap<String, Object>()
        def keySet = ['keyStore','keyPassword','keySecret']
        props.each {
            if (it.key.startsWith(prefix)) {
                def splited = it.key.split("\\.")
                if (splited.length == 3) {
                    def user = splited[1]
                    def key = splited[2]
                    if (keySet.contains(key)) {
                        def obj = scoreTest.getOrDefault(user, new HashMap<String, String>())
                        obj.put(key, it.value.toString())
                        scoreTest.put(user, obj)
                    }
                }
            }
        }
        scoreTest.each {
            def resolvedKeyPassword = it.value.get('keyPassword')
            if (resolvedKeyPassword == null) {
                if (it.value.containsKey('keySecret')) {
                    resolvedKeyPassword = Files.readString(
                            java.nio.file.Path.of(it.value.get('keySecret').toString()))
                }
            }
            it.value.put('resolvedKeyPassword', resolvedKeyPassword)
        }

        scoreTest.put('url', props.getOrDefault(prefix + 'url', 'http://localhost:9082/api/v3'))
        scoreTest.put('nid', props.getOrDefault(prefix + 'nid', 3))
        scoreTest.put('parseNid', { Object v ->
            if (v instanceof String) {
                return v.startsWith("0x") ?
                        Integer.parseInt(v.substring(2), 16) :
                        Integer.parseInt(v)
            } else {
                return v as int
            }
        })

        if (!scoreTest.containsKey("default")) {
            scoreTest.put("default", Map.of("keyStore","","keySecret","","resolvedKeyPassword",""))
        }
        if (!scoreTest.containsKey("tester")) {
            scoreTest.put("tester", Map.of("keyStore","","keySecret","","resolvedKeyPassword",""))
        }

        ext['scoreTest'] = scoreTest
    }
    loadProperties()
}

configure([
        project(':lib'),
        project(':xcall'),
]) {
    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier 'javadoc'
        from javadoc.destinationDir
    }

    group = getProperty("group")

    def projectName = 'btp2-'+ project.name.replaceAll("_","-")
    def repoUrl = 'https://github.com/icon-project/btp2-java'
    def pomConfig = {
        licenses {
            license {
                name "The Apache Software License, Version 2.0"
                url "http://www.apache.org/licenses/LICENSE-2.0.txt"
                distribution "repo"
            }
        }
        developers {
            developer {
                id "iconfoundation"
                name "icon.foundation"
                email "foo@icon.foundation"
            }
        }
        scm {
            url repoUrl
        }
    }

    publishing {
        repositories {
            maven {
                name = 'mavenCentral'
                def releasesUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
                def snapshotsUrl = "https://oss.sonatype.org/content/repositories/snapshots"
                url = rootProject.hasProperty('release') ? releasesUrl : snapshotsUrl
                credentials {
                    username = rootProject.hasProperty('mavenCentralUsername') ? "$mavenCentralUsername" : ''
                    password = rootProject.hasProperty('mavenCentralPassword') ? "$mavenCentralPassword" : ''
                }
            }
        }
        publications {
            mavenJava(MavenPublication) {
                groupId = group
                artifactId = projectName
                from components.java
                artifact sourcesJar
                artifact javadocJar
                pom.withXml {
                    def root = asNode()
                    root.appendNode('name', projectName)
                    root.appendNode('description', 'Java Contracts for BTP2')
                    root.appendNode('url', repoUrl)
                    root.children().last() + pomConfig
                }
            }
        }
    }

    signing {
        required rootProject.hasProperty('release')
        sign publishing.publications.mavenJava
    }
}
