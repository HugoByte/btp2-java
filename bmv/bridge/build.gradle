version = '0.1.0'

dependencies {
    compileOnly("foundation.icon:javaee-api:$javaeeVersion")
    implementation("foundation.icon:javaee-scorex:$scorexVersion")
    implementation project(':lib')

    //for generate ScoreClient
    compileOnly("foundation.icon:javaee-score-client:$scoreClientVersion")
    annotationProcessor("foundation.icon:javaee-score-client:$scoreClientVersion")

    testImplementation("org.junit.jupiter:junit-jupiter-api:$jupiterVersion")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:$jupiterVersion")

    testImplementation("foundation.icon:javaee-unittest:$javaeeUnittestVersion")
    testImplementation project(':test-lib')
    testAnnotationProcessor("foundation.icon:javaee-score-client:$scoreClientVersion")
    testImplementation("foundation.icon:javaee-score-client:$scoreClientVersion")
}

optimizedJar {
    dependsOn(project(':lib').jar)
    mainClassName = 'foundation.icon.btp.bmv.bridge.BTPMessageVerifier'
    archivesBaseName = 'bmv-bridge'
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    } { exclude "score/*" }
    enableDebug = debugJar
}

deployJar {
    endpoints {
        local {
            uri = scoreTest.url
            nid = scoreTest.parseNid(scoreTest.nid)
        }
    }
    keystore = scoreTest.default.keyStore
    password = scoreTest.default.resolvedKeyPassword
    parameters {[
            arg('_bmc', 'cx0000000000000000000000000000000000000000'),
            arg('_net', '0x0.icon'),
            arg('_offset', '0x0')
        ]
    }
}

test {
    useJUnitPlatform {
        if (!integrationTest) {
            excludeTags("integration")
        }
    }
    options {
        testLogging.showStandardStreams = true
        systemProperty 'url', scoreTest.url
        systemProperty 'nid', scoreTest.nid
        systemProperty 'keyStore', scoreTest.default.keyStore
        systemProperty 'keyPassword', scoreTest.default.resolvedKeyPassword
//        systemProperty 'address', "cx0000000000000000000000000000000000000000"
//        systemProperty 'isUpdate', "true"
        dependsOn optimizedJar
        systemProperty 'scoreFilePath', project.tasks.optimizedJar.outputJarName
        project.extensions.deployJar.arguments.each {
            arg -> systemProperty 'params.'+arg.name, arg.value
        }

        //for bsh-mock client
        systemProperty 'bmc-mock.url', scoreTest.url
        systemProperty 'bmc-mock.nid', scoreTest.nid
        systemProperty 'bmc-mock.keyStore', scoreTest.default.keyStore
        systemProperty 'bmc-mock.keyPassword', scoreTest.default.resolvedKeyPassword
//        systemProperty 'address', "cx0000000000000000000000000000000000000000"
//        systemProperty 'isUpdate', "true"
        dependsOn ":test-lib:optimizedJarMockBMC"
        systemProperty 'bmc-mock.scoreFilePath', tasks.getByPath(":test-lib:optimizedJarMockBMC").outputJarName
        systemProperty 'bmc-mock.params._net', scoreTest.nid+'.icon'
    }
}
