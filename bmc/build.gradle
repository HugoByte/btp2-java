version = '0.1.0'

dependencies {
    compileOnly("foundation.icon:javaee-api:$javaeeVersion")
    implementation("foundation.icon:javaee-scorex:$scorexVersion")
    implementation project(':lib')

    //for generate ScoreClient
    compileOnly("foundation.icon:javaee-score-client:$scoreClientVersion")
    annotationProcessor("foundation.icon:javaee-score-client:$scoreClientVersion")

    testImplementation("org.junit.jupiter:junit-jupiter-api:$jupiterVersion")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:$jupiterVersion")
    testImplementation("org.junit.jupiter:junit-jupiter-params:$jupiterVersion")

    testImplementation("foundation.icon:javaee-unittest:$javaeeUnittestVersion")
    testImplementation project(':test-lib')
    testAnnotationProcessor("foundation.icon:javaee-score-client:$scoreClientVersion")
    testImplementation("foundation.icon:javaee-score-client:$scoreClientVersion")
}

optimizedJar {
    dependsOn(project(':lib').jar)
    mainClassName = 'foundation.icon.btp.bmc.BTPMessageCenter'
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    } { exclude "score/*" }
    enableDebug = debugJar
}

deployJar {
    endpoints {
        local {
            uri = scoreTest.url
            nid = scoreTest.parseNid(scoreTest.nid)
        }
    }
    keystore = scoreTest.default.keyStore
    password = scoreTest.default.resolvedKeyPassword
    parameters {
        arg('_net', scoreTest.nid+'.icon')
    }
}

test {
    useJUnitPlatform {
        if (!integrationTest) {
            excludeTags("integration")
        }
    }

    options {
        testLogging.showStandardStreams = true
        systemProperty 'url', scoreTest.url
        systemProperty 'nid', scoreTest.nid
        systemProperty 'keyStore', scoreTest.default.keyStore
        systemProperty 'keyPassword', scoreTest.default.resolvedKeyPassword
//        systemProperty 'address', "cx9d9febc3a11565e26b6a0dbea2a4c3fd402bae86"
//        systemProperty 'isUpdate', "true"
        dependsOn optimizedJar
        systemProperty 'scoreFilePath', project.tasks.optimizedJar.outputJarName
        project.extensions.deployJar.arguments.each {
            arg -> systemProperty 'params.'+arg.name, arg.value
        }

        //for foundation.icon.btp.test.ScoreIntegrationTest
        systemProperty 'tester.keyStore', scoreTest.tester.keyStore
        systemProperty 'tester.keyPassword', scoreTest.tester.resolvedKeyPassword

        //for bmv-mock client
        systemProperty 'bmv-mock.url', scoreTest.url
        systemProperty 'bmv-mock.nid', scoreTest.nid
        systemProperty 'bmv-mock.keyStore', scoreTest.default.keyStore
        systemProperty 'bmv-mock.keyPassword', scoreTest.default.resolvedKeyPassword
//        systemProperty 'bmv-mock.address', "cx0f549056aeebed9c06833bebfe8b17113958532f"
//        systemProperty 'bmv-mock.isUpdate', "true"
        dependsOn ":test-lib:optimizedJarMockBMV"
        systemProperty 'bmv-mock.scoreFilePath', tasks.getByPath(":test-lib:optimizedJarMockBMV").outputJarName

        //for bmv-mock client
        systemProperty 'bsh-mock.url', scoreTest.url
        systemProperty 'bsh-mock.nid', scoreTest.nid
        systemProperty 'bsh-mock.keyStore', scoreTest.default.keyStore
        systemProperty 'bsh-mock.keyPassword', scoreTest.default.resolvedKeyPassword
//        systemProperty 'bsh-mock.address', "cx47853622a461b34885c42d74e8354b03a3e88a42"
//        systemProperty 'bsh-mock.isUpdate', "true"
        dependsOn ":test-lib:optimizedJarMockBSH"
        systemProperty 'bsh-mock.scoreFilePath', tasks.getByPath(":test-lib:optimizedJarMockBSH").outputJarName

        //for gov-mock client
        systemProperty 'gov-mock.url', scoreTest.url
        systemProperty 'gov-mock.nid', scoreTest.nid
        systemProperty 'gov-mock.keyStore', scoreTest.default.keyStore
        systemProperty 'gov-mock.keyPassword', scoreTest.default.resolvedKeyPassword
        systemProperty 'gov-mock.address', "cx0000000000000000000000000000000000000001"
        systemProperty 'gov-mock.isUpdate', "true"
        dependsOn ":test-lib:optimizedJarMockGov"
        systemProperty 'gov-mock.scoreFilePath', tasks.getByPath(":test-lib:optimizedJarMockGov").outputJarName

        //for foundation.icon.btp.test.MockGovIntegrationTest
        systemProperty 'validator.keyStore', scoreTest.default.keyStore
        systemProperty 'validator.keyPassword', scoreTest.default.resolvedKeyPassword
    }
}
